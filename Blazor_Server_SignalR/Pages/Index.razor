@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<body style="background-color: black; padding:0; ">
    <div class="tituloMain">
        <img style="width:700px; height:200px;" src="https://drive.google.com/uc?export=view&id=1DXbb_Ww0fCLhHcXkHR7W7W0ZHouZ5bOI">
    </div>

    <div class="chatBox">
        <div style="border: 1px solid black; width: auto; Height: 400px; background-color:white;">
            <hr />
                <ul style="color: black;">
                @foreach (string msg in mensajes)
                {
                    <li style="color: black; padding-bottom:0px;">@msg</li>
                }
            </ul>
        </div>

        <div class="form-group" style="width:auto;">
            <label  style="color: black; width: 400px">User: </label>
            <input @bind="userInput" style="color: black; width:100%;"></input>
        </div>
        

        <div>
            <div class="form-group" style="width:auto;">
                <label style="color: black; width: 400px">Message: </label>
                <div style="width:auto;">
                    <input @bind="msgInput" @onkeydown="Enter" class="msgBox" style="color: black;"></input>
                    <button @onclick="Send" disabled="@(EstaConectado == false)" class="btn_enviar">Enviar</button>
                </div>
                
            </div>
        </div>
    </div>

    <div class="noticiasIndex">
        <h3 style="width:100%;">Noticias</h3>
        <div class="noticias">

        </div>
    </div>

</body>


@code
{
    private HubConnection? hubConnection;
    private List<string> mensajes = new();
    private List<string> Invert = new();
    private string? userInput;
    private string? msgInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavManager.ToAbsoluteUri("/chathub")).WithAutomaticReconnect().Build();

        hubConnection.On<string, string>("RecibirMensaje", (user, msg) =>
        {
            var mensajeCompleto = $"{user}:  {msg}";
            mensajes.Add(mensajeCompleto);

            if (mensajes.Count > 10) 
            {
                mensajes.RemoveAt(0);
            }
            //Invert = Enumerable.Reverse(mensajes).ToList();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            if (this.msgInput != null && this.msgInput != "")
            {
                await hubConnection.SendAsync("EnviarMensaje", userInput, msgInput);
                this.msgInput = "";
            }
        }
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (this.msgInput != null && this.msgInput != "")
            {
                await hubConnection.SendAsync("EnviarMensaje", userInput, msgInput);
                this.msgInput = "";
            }
        }
    }

    public bool EstaConectado => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}