@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<body style="background-color: black; padding:0; ">
<div style="border: 2px solid black; margin: 20px; margin-bottom:1px; margin-top: 0px; padding: 25px; width: 100%; text-align: center; float:left;">
    <h1 style="color: white;">Trabajo Practico</h1>
    <h2 style="color: white; font-size:28px;">WENI</h2>
</div>


<div style="border: 2px solid black; margin: 25px; margin-top:0px; margin-bottom:1px;  padding: 25px; width:50%; float:left;">
    <div class="form-group">
        <label style="color: white; width: 300px">
            User: <input @bind="userInput" style="width:100%;"></input>
        </label>
    </div>
    <div class="form-group">

        <label style="color: white; width: 300px">
            Message: <input  @bind="msgInput" style="width:100%;"></input>
        </label>
    </div>

    <button @onclick="Send"  disabled="@(EstaConectado == false)" style="color: black; border: 2px solid black; border-radius: 5px; width: 300px; align-items: center;">
        Enviar
    </button>

    <div style="border: 1px solid black; width: 300px; Height: 300px; background-color:white;">
        <hr />
        <ul style="color: red;">
            @foreach (string msg in mensajes)
            {
                <li style="padding-bottom:0px;">@msg</li>
            }
        </ul>
    </div>
</div>

</body>


@code
{
    private HubConnection? hubConnection;
    private List<string> mensajes = new();
    private List<string> Invert = new();
    private string? userInput;
    private string? msgInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavManager.ToAbsoluteUri("/chathub")).WithAutomaticReconnect().Build();

        hubConnection.On<string, string>("RecibirMensaje", (user, msg) =>
        {
            var mensajeCompleto = $"{user}:  {msg}";
            mensajes.Add(mensajeCompleto);

            if (mensajes.Count > 10) 
            {
                mensajes.RemoveAt(0);
            }
            //Invert = Enumerable.Reverse(mensajes).ToList();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("EnviarMensaje", userInput, msgInput);
        }

    }

    private async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await Send();
        }
    }

    public bool EstaConectado => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}